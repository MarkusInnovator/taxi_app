# Docker Compose for development
version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: taxi-app-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: taxi_app
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - taxi-app-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: taxi-app-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - taxi-app-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taxi-app-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/taxi_app?authSource=admin
      JWT_SECRET: taxi-app-super-secret-jwt-key-development
      JWT_EXPIRES_IN: 24h
      BASE_FARE: 3.50
      PRICE_PER_KM: 1.80
      PRICE_PER_MINUTE: 0.35
      SURGE_MULTIPLIER: 1.0
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - taxi-app-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: taxi-app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - taxi-app-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  taxi-app-network:
    driver: bridge