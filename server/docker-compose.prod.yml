# Production Docker Compose
version: '3.8'

services:
  # MongoDB with replica set for production
  mongodb:
    image: mongo:7.0
    container_name: taxi-app-mongodb-prod
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: taxi_app
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-keyfile:/opt/keyfile/mongo-keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: ["--replSet", "rs0", "--keyFile", "/opt/keyfile/mongo-keyfile", "--bind_ip_all"]
    networks:
      - taxi-app-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: taxi-app-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - taxi-app-network

  # Backend API
  backend:
    image: ${DOCKER_USERNAME}/taxi-app-backend:latest
    container_name: taxi-app-backend-prod
    restart: always
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/taxi_app?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      
      # Payment settings
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      
      # Maps API
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      
      # App settings
      BASE_FARE: ${BASE_FARE:-3.50}
      PRICE_PER_KM: ${PRICE_PER_KM:-1.80}
      PRICE_PER_MINUTE: ${PRICE_PER_MINUTE:-0.35}
      SURGE_MULTIPLIER: ${SURGE_MULTIPLIER:-1.0}
      
      # Email settings
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on:
      - mongodb
      - redis
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - taxi-app-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: taxi-app-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - taxi-app-network

  # Log aggregation with Filebeat (optional)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: taxi-app-filebeat
    restart: always
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - KIBANA_HOST=${KIBANA_HOST}
    networks:
      - taxi-app-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: taxi-app-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - taxi-app-network

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  taxi-app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16